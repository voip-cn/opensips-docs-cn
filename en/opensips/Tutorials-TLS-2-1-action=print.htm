<!DOCTYPE html 
    PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html><head>
  <title>openSIPS | Documentation / Tutorials-TLS-2-1</title>
  <link rel='stylesheet' href="print.css" tppabs="http://www.opensips.org/pub/skins/print/print.css" type='text/css' />
  <!--HTMLHeader--><style type='text/css'><!--
  ul, ol, pre, dl, p { margin-top:0px; margin-bottom:0px; }
  code.escaped { white-space: nowrap; }
  .indent { margin-left:40px; }
  .outdent { margin-left:40px; text-indent:-40px; }
  a.createlinktext { text-decoration:none; border-bottom:1px dotted gray; }
  a.createlink { text-decoration:none; position:relative; top:-0.5em;
    font-weight:bold; font-size:smaller; border-bottom:none; }
  img { border:0px; }
  
span.anchor {
	float: left;
	font-size: 10px;
	margin-left: -10px;
	width: 10px;
    position:relative; top:-0.1em;
	text-align: center;
}
span.anchor a { text-decoration: none; }
span.anchor a:hover { text-decoration: underline; }
ol.toc { text-indent:-20px; list-style: none; }
ol.toc ol.toc { text-indent:-40px; }
div.tocfloat { font-size: smaller; margin-bottom: 10px;
    border-top: 1px dotted #555555; border-bottom: 1px dotted #555555;
    padding-top: 5px; padding-bottom: 5px; 
    width: 38%; float: right; margin-left: 10px; clear: right;
    margin-right:-13px; padding-right: 13px; padding-left: 13px;
    background-color: #eeeeee; }
div.toc { font-size: smaller; 
    padding: 4px; border: 1px dotted #cccccc;
    background: #f7f7f7;
    margin-bottom: 10px; }
  table.markup { border:2px dotted #ccf; width:90%; }
  td.markup1, td.markup2 { padding-left:10px; padding-right:10px; }
  table.vert td.markup1 { border-bottom:1px solid #ccf; }
  table.horiz td.markup1 { width:23em; border-right:1px solid #ccf; }
  table.markup caption { text-align:left; }
  div.faq p, div.faq pre { margin-left:2em; }
  div.faq p.question { margin:1em 0 0.75em 0; font-weight:bold; }
  div.faqtoc div.faq * { display:none; }
  div.faqtoc div.faq p.question 
    { display:block; font-weight:normal; margin:0.5em 0 0.5em 20px; line-height:normal; }
  div.faqtoc div.faq p.question * { display:inline; }
  .editconflict { color:green; 
  font-style:italic; margin-top:1.33em; margin-bottom:1.33em; }
 
    .frame 
      { border:1px solid #cccccc; padding:4px; background-color:#f9f9f9; }
    .lfloat { float:left; margin-right:0.5em; }
    .rfloat { float:right; margin-left:0.5em; }
a.varlink { text-decoration:none; }

--></style><script type="text/javascript">
function toggle(obj) {
    var elstyle = document.getElementById(obj).style;
    var text    = document.getElementById(obj + "tog");
    if (elstyle.display == 'none') {
        elstyle.display = 'block';
        text.innerHTML = "hide";
    } else {
        elstyle.display = 'none';
        text.innerHTML = "show";
    }
}
</script>
  <link href="commentboxplus.css" tppabs="http://www.opensips.org/pub/commentboxplus/commentboxplus.css" rel='stylesheet' type='text/css' />
  <link rel='stylesheet' href="wsplus.css" tppabs="http://www.opensips.org/pub/wsplus/wsplus.css" 
    type='text/css' />
  <!--[if IE]><style type='text/css' media='screen'>
    body { behavior:url("csshover.htc")/*tpa=http://www.opensips.org/pub/wsplus/csshover.htc*/; }
    .rollover * { visibility: visible; }
  </style><![endif]-->
  <meta name='robots' content='noindex,nofollow' />

</head>
<body>
  <div id='printhead'>
    <h3>From openSIPS</h3>
    <h1 class='pagename'><a href="javascript:if(confirm(%27http://www.opensips.org/Documentation  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://www.opensips.org/Documentation%27" tppabs="http://www.opensips.org/Documentation">Documentation: Tutorials-TLS-2-1</a></h1>
  </div>
<!--PageText-->
<div id='wikitext'>
<h5>Documentation -&gt; <a class='wikilink' href="Tutorials-action=print.htm" tppabs="http://www.opensips.org/Documentation/Tutorials?action=print">Tutorials</a> -&gt; TLS</h5>
<h1>TLS</h1>
<p  style='text-align: right;'> <strong>written by Ionut-Razvan Ionita</strong>
</p>
<div class='vspace'></div><div class='toc'><p><a name='toc' id='toc'></a><b>Table of Content</b> (<a id="tocidtog" href="javascript:toggle('tocid');">hide</a>)</p><ol class='toc' id='tocid'><li>1.&nbsp;<a href='#toc1'>Introduction</a></li><li>2.&nbsp;<a href='#toc2'>Generating certificates</a><ol class='toc'><li>2.1&nbsp;<a href='#toc3'>Overview</a></li><li>2.2&nbsp;<a href='#toc4'>Creating the CA</a></li><li>2.3&nbsp;<a href='#toc5'>Creating server and client certificates</a></li><li>2.4&nbsp;<a href='#toc6'>Using <strong>OpenSIPS</strong> built-in certificates</a></li></ol></li><li>3.&nbsp;<a href='#toc7'>Script example</a><ol class='toc'><li>3.1&nbsp;<a href='#toc8'>Overview</a></li><li>3.2&nbsp;<a href='#toc9'>The listener</a></li><li>3.3&nbsp;<a href='#toc10'>Including TLS module and setting the parameters</a></li><li>3.4&nbsp;<a href='#toc11'>Setting up TLS domains</a></li><li>3.5&nbsp;<a href='#toc12'>Full script example</a></li></ol></li><li>4.&nbsp;<a href='#toc13'>Troubleshooting</a><ol class='toc'><li>4.1&nbsp;<a href='#toc14'>Overview</a></li><li>4.2&nbsp;<a href='#toc15'>S_client simple testing</a></li><li>4.3&nbsp;<a href='#toc16'>Wireshark tracing</a></li></ol></li></ol></div>
<div class='vspace'></div><h2><a name='toc1' id='toc1'></a>1.&nbsp; Introduction</h2>
<p>Configuring TLS can sometimes be time consuming, most times because of badly generated or used certificates. What this tutorial is trying to do is providing a basic TLS configuration for OpenSIPS which we know for sure that will work and be the entry point for future, more complicated, TLS setups. At first we will be trying to do the most important thing of all: generating some certificates which we can use to later configure OpenSIPS. If all you want to do is testing the TLS, you can always skip to section <a class='urllink' href="Tutorials-TLS-2-1.htm#toc6" tppabs="http://www.opensips.org/Documentation/Tutorials-TLS-2-1#toc6" rel='nofollow'><strong>2.4 Using OpenSIPS built-in certificates</strong></a>. The next step will be writing a script for OpenSIPS which will use TLS. After starting OpenSIPS, what we must do is testing that OpenSIPS works fine listening for TLS connections from UACs and creating new connections with UACs and debugging the handshake.
</p>
<div class='vspace'></div><h2><a name='toc2' id='toc2'></a>2.&nbsp; Generating certificates</h2>
<h3><a name='toc3' id='toc3'></a>2.1&nbsp; Overview</h3>
<p>Before configuring OpenSIPS we need to have a CA and be able to sign certificates with this CA. In order to do this, we will configure a new CA and a user certificate signed by this CA. We will use OpenSIPS to achieve these goals, since it offers a very simple way to manage certificate related issues using <strong>opensipsctl</strong> script. Also, you can always create your own CA or set of certificates using the scripts provided by openSSL or by other means.
</p>
<div class='vspace'></div><h3><a name='toc4' id='toc4'></a>2.2&nbsp; Creating the CA</h3>
<h4>Creating context</h4>
<p>First thing we need to do is setup the context for our certificates to be created. Let’s say that you want to use <strong>$OPENSIPS_HOME/tls_cnf</strong> (<strong>$OPENSIPS_HOME</strong> represents the path to your OpenSIPS install).
Create this folder (if it doesn’t exist) and inside create a folder named tls. Will explain later why we needed  to do this.
</p><div class='frame lfloat frame lfloat' style='color: black;' > 
<p>cd $OPENSIPS_HOME <br clear='all' />
mkdir tls_cnf; cd tls_cnf; mkdir tls
</p></div>
<p class='vspace'><br clear='all' />
<br clear='all' />
</p>
<div class='vspace'></div><h4>Setting up ca.conf file</h4>
<p>Next we need to generate our certificating authority, but first we need a configuration file for this, because based on this configuration file, OpenSIPS will know the details of your request. In this configuration file you can set the paths where the CA will be generated,  validity, DN etc.  For users who did this before, it looks similar to “openssl.cnf” file. You can find an example in <strong>$OPENSIPS_HOME/etc/tls/ca.conf</strong>. In this tutorial we only want to make it work, so we will use that file by copying it to our <strong>tls_cnf/tls</strong> folder.
</p><div class='frame lfloat frame lfloat' style='color: black;' > 
<p>cp $OPENSIPS_HOME/etc/tls/ca.conf $OPENSIPS_HOME/tls_cnf/tls/ 
</p></div>
<p class='vspace'><br clear='all' />
<br clear='all' />
</p>
<div class='vspace'></div><h4>Creating the CA</h4>
<p>Now that we set up the context, we can create the CA. Go to your <strong>$OPENSIPS_HOME/scripts</strong> folder.
</p><div class='frame lfloat frame lfloat' style='color: black;' > 
<p>cd $OPENSIPS_HOME/scripts
</p></div>
<p class='vspace'><br clear='all' />
<br clear='all' />
Here you should be able to find the <strong>opensipsctl</strong> script. Use the following command:
</p><div class='frame lfloat frame lfloat' style='color: black;' > 
<p>./opensipsctl tls rootCA $OPENSIPS_HOME/tls_cnf/tls 
</p></div>
<p class='vspace'><br clear='all' />
<br clear='all' />
The rootCA parameter specifies to the script that you want to create a new certificating authority (the parameter cannot be changed). The last parameter specifies the folder where we want this CA to be installed, so we will chose the folder we set up earlier. <br clear='all' /><br clear='all' />
After giving the command you will be requested to introduce a passphrase. We will use this passphrase later when we will create the certificates. The server certificate will consist of the certificate found in the new <strong>rootCA</strong> folder created <strong>$OPENSIPS_HOME/tls_cnf/tls/rootCA/cacert.pem</strong>, and the private key will be in <strong>$OPENSIPS_HOME/tls_cnf/tls/rootCA/private/cakey.pem</strong>.
</p>
<div class='vspace'></div><h3><a name='toc5' id='toc5'></a>2.3&nbsp; Creating server and client certificates</h3>
<p>To create a user certificate you will need to create <strong>request.conf</strong> and <strong>&lt;user_name&gt;.conf</strong> file in order to use <strong>opensipsctl</strong>. In this tutorial we will simply use the files provided by OpenSIPS in <strong>$OPENSIPS_HOME/etc/tls</strong> called <strong>request.conf</strong> and <strong>user.conf</strong>.
</p>
<div class='vspace'></div><div class='frame lfloat frame lfloat' style='color: black;' > 
<p>cp $OPENSIPS_HOME/etc/tls/request.conf $OPENSIPS_HOME/tls_cnf/tls/  <br clear='all' />
cp $OPENSIPS_HOME/etc/tls/user.conf $OPENSIPS_HOME/tls_cnf/tls/     <br clear='all' />
</p></div> 
<p class='vspace'><br clear='all' />
<br clear='all' />
</p>
<p class='vspace'>Next we have to go again to <strong>$OPENSIPS_HOME/scripts</strong> and use <strong>opensipsctl</strong>.
</p>
<div class='vspace'></div><div class='frame lfloat frame lfloat' style='color: black;' > 
<p>cd $OPENSIPS_HOME/scripts <br clear='all' />
./opensipsctl tls userCERT user $OPENSIPS_HOME/tls_cnf/tls
</p></div> 
<p class='vspace'><br clear='all' />
<br clear='all' />
</p>
<p class='vspace'>The third parameter’s meaning is the name of the user which must be the same as the <strong>&lt;user_name&gt;.conf</strong> file. So, for example, if we wanted the user <strong>alice</strong>, the file must have had the name <strong>alice.conf</strong> . The fourth parameter represents the path where you have the configuration files. Now, that we have created the certificates we can move to the following section, a script example to use TLS with OpenSIPS.
</p>
<div class='vspace'></div><h3><a name='toc6' id='toc6'></a>2.4&nbsp; Using <strong>OpenSIPS</strong> built-in certificates</h3>
<p>If all you want to do is testing, you can always use the certificates located in <strong>$OPENSIPS_HOME/etc/tls</strong>, but we strongly recommend to you not to use this certificates in real case scenarios, because, as you can imagine, everyone has access to them. Also notice that the passphrase with which the CA is configured
is <strong>opensips</strong>.
<br clear='all' />
<strong>IMPORTANT: in the following sections we will refer to the folder where the certificates are located as $CERT_DIR, so none of the paths presented above are valid anymore, but we will keep the notations rootCA as the folder where the CA is installed and user where the user certificates are.</strong>
</p>
<div class='vspace'></div><h2><a name='toc7' id='toc7'></a>3.&nbsp;Script example</h2>
<h3><a name='toc8' id='toc8'></a>3.1&nbsp;Overview</h3>
<p>As you probably discovered, in OpenSIPS 2.1 the tls became a module, so now, every parameter we want to pass to TLS will be a <strong>modparam</strong> parameter. The scenario is very simple, UAC is trying to send an invite to an UAS by using OpenSIPS as a proxy, and both connections     UAC&lt;-&gt;OpenSIPS and OpenSIPS&lt;-&gt;UAS are using encrypted data transfer, using TLS. So we will try to provide a basic TLS script configuration which tries to use basically all the configurable parameters of the TLS module, from which you can start building your own.
</p>
<div class='vspace'></div><h3><a name='toc9' id='toc9'></a>3.2&nbsp;The listener</h3>
<p>In order to accept TLS connections, OpenSIPS must have a TLS listener. In order to do this we have to include the following line in our script:
</p><div class='frame lfloat frame lfloat' style='color: black;' > 
<p>listen=tls:&lt;your-ip-address&gt;:&lt;port&gt;
</p></div> 
<p class='vspace'><br clear='all' />
<br clear='all' />
</p>
<p class='vspace'>When OpenSIPS will start, you should be able to see the listener by entering the following command in your command line
</p><div class='frame lfloat frame lfloat' style='color: black;' > 
<p>netstat -tlp | grep &lt;port&gt;
</p></div> 
<p class='vspace'><br clear='all' />
<br clear='all' />
</p>
<p class='vspace'>where port is the port you gave to listen line in your script.
</p>
<div class='vspace'></div><h3><a name='toc10' id='toc10'></a>3.3&nbsp;Including TLS module and setting the parameters</h3>
<p>Since TLS became a module, now we need to insert the following line in the modules section
</p>
<div class='vspace'></div><div class='frame lfloat frame lfloat' style='color: black;' > 
<p>loadmodule "proto_tls.so"
</p></div> 
<p class='vspace'><br clear='all' />
<br clear='all' />
</p>
<p class='vspace'>Since this is a test scenario, we only want to check that the TLS handshake works fine, so we won’t 
set parameters to enable certificate checking or ciphers. As OpenSIPS enables these checkings by default because a real TLS configuration must check the certificates, we will need to disable them.
</p>
<div class='vspace'></div><div class='frame lfloat frame lfloat' style='color: black;' > 
<p>modparam("proto_tls", "verify_cert", "0") <br clear='all' />
modparam("proto_tls", "require_cert", "0") <br clear='all' />
modparam("proto_tls", "ciphers_list", "NULL") <br clear='all' />
</p></div> 
<p class='vspace'><br clear='all' />
<br clear='all' />
</p>
<p class='vspace'>We will need to specify the TLS method which will specify what type of protocol we will use. In this tutorial we will use “TLSv1”, but you can always use another one, see the full list in the <strong><a class='urllink' href="javascript:if(confirm(%27http://www.opensips.org/html/docs/modules/2.1.x/proto_tls.html  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://www.opensips.org/html/docs/modules/2.1.x/proto_tls.html#id294154%27" tppabs="http://www.opensips.org/html/docs/modules/2.1.x/proto_tls.html#id294154" rel='nofollow'>module’s documentation section</a></strong>. 
</p>
<div class='vspace'></div><div class='frame lfloat frame lfloat' style='color: black;' > 
<p>modparam("proto_tls", "tls_method", "TLSv1")
</p></div> 
<p class='vspace'><br clear='all' />
<br clear='all' />
</p>
<p class='vspace'>Also, in order for OpenSIPS to start, we need to configure some "global" certificates. We need to do this because we need a default match, if no domain is matched, we will need a default case, something to match everything, just like <strong>0.0.0.0</strong> route in routing tables. You can always jump over the following section <a class='urllink' href="Tutorials-TLS-2-1.htm#toc12" tppabs="http://www.opensips.org/Documentation/Tutorials-TLS-2-1#toc12" rel='nofollow'><strong>3.4 Setting up TLS domains</strong></a> directly to <a class='urllink' href="Tutorials-TLS-2-1.htm#toc12" tppabs="http://www.opensips.org/Documentation/Tutorials-TLS-2-1#toc12" rel='nofollow'><strong>3.5 Full script example</strong></a>, because they represent a more specific type of scripting, but it is recommended to read about <strong>server domains</strong> which allow you to use different settings on different listening interfaces. 
</p>
<div class='vspace'></div><div class='frame lfloat frame lfloat' style='color: black;' > 
<pre> modparam("proto_tls", "certificate", "$CERT_DIR/rootCA/cacert.pem")           
 modparam("proto_tls", "private_key", "$CERT_DIR/rootCA/private/cakey.pem")    
 modparam("proto_tls", "ca_list", "$CERT_DIR/rootCA/cacert.pem")                
 modparam("proto_tls", "ca_dir", "$CERT_DIR/rootCA/")                
</pre></div> 
<p class='vspace'><br clear='all' />
<br clear='all' />
</p>
<div class='vspace'></div><h3><a name='toc11' id='toc11'></a>3.4&nbsp;Setting up TLS domains</h3>
<p>As specified in section <a class='urllink' href="Tutorials-TLS-2-1-action=edit.htm#toc8" tppabs="http://www.opensips.org/Documentation/Tutorials-TLS-2-1?action=edit#toc8" rel='nofollow'><strong>3.1 Overview</strong></a>, our scenario includes two TLS connections, one from the UAC to OpenSIPS and the second one from OpenSIPS to the UAS. Whereas in the first connection OpenSIPS will be the server side of the connection, in the second one it will be the client side so we need to define two different TLS domains.
</p>
<div class='vspace'></div><div class='frame lfloat frame lfloat' style='color: black;' > 
<pre> #first the  server domain
 modparam("proto_tls", "server_domain", "sv_dom=&lt;your-ip-address&gt;:&lt;port&gt;")           
 modparam("proto_tls", "certificate", "sv_dom:$CERT_DIR/rootCA/cacert.pem")           
 modparam("proto_tls", "private_key", "sv_dom:$CERT_DIR/rootCA/private/cakey.pem")    
 modparam("proto_tls", "ca_list", "sv_dom:$CERT_DIR/rootCA/cacert.pem")                

 #and the client domain                                                               
 modparam("proto_tls", "client_domain", "cl_dom=&lt;UAS-ip-address&gt;:&lt;port&gt;")            
 modparam("proto_tls", "certificate", "cl_dom:$CERT_DIR/user/user-cert.pem")          
 modparam("proto_tls", "private_key", "cl_dom:$CERT_DIR/user/user-privkey.pem")       
 modparam("proto_tls", "ca_list", 'cl_dom:$CERT_DIR/user/user-calist.pem")             
</pre><div class='vspace'></div></div> 
<p class='vspace'><br clear='all' />
<br clear='all' />
</p>
<p class='vspace'><strong>IMPORTANT: The ip address and port from the server domain must be the ones you set in the “listen” script line for OpenSIPS to match that domain. When OpenSIPS acts as client, the ip address and port must be the ones of the server (remote peer) with whom initiates the TLS handshake, so unless you do not know the remote address and port there is no need to define a client domain, default settings will be used.</strong>
</p>
<div class='vspace'></div><h3><a name='toc12' id='toc12'></a>3.5&nbsp; Full script example</h3>
<p>Now that we specified all we need to set in order to be able to use TLS both as a server and as a client we will specify here a full script (only the TLS part) in order to make things more clear. Basically it is all we explained in the previous sections of this chapter put together.
</p>
<div class='vspace'></div><div class='frame lfloat frame lfloat' style='color: black;' > 
<pre> #define the listener
 listen = tls:&lt;your-ip-address&gt;:&lt;port&gt;

 #set module path
 loadmodule “proto_tls.so”

 #set global tls parameters
 modparam("proto_tls", "verify_cert", "0")
 modparam("proto_tls", "require_cert", "0")
 modparam("proto_tls", "ciphers_list", "NULL")
 modparam("proto_tls", "tls_method", "TLSv1")

 modparam("proto_tls", "certificate", "$CERT_DIR/rootCA/cacert.pem")           
 modparam("proto_tls", "private_key", "$CERT_DIR/rootCA/private/cakey.pem")    
 modparam("proto_tls", "ca_list", "$CERT_DIR/rootCA/cacert.pem")                
 modparam("proto_tls", "ca_dir", "$CERT_DIR/rootCA/")                


 #server domain
 modparam("proto_tls", "server_domain", "sv_dom=&lt;your-ip-address&gt;:&lt;port&gt;")
 modparam("proto_tls", "certificate", "sv_dom:$CERT_DIR/rootCA/cacert.pem")
 modparam("proto_tls", "private_key", "sv_dom:$CERT_DIR/rootCA/private/cakey.pem")
 modparam("proto_tls", "ca_list", "sv_dom:$CERT_DR/rootCA/cacert.pem")

 #client domain
 modparam("proto_tls", "client_domain", "cl_dom=&lt;UAS-ip-address&gt;:&lt;port&gt;")
 modparam("proto_tls", "certificate", "cl_dom:$CERT_DIR/user/user-cert.pem")
 modparam("proto_tls", "private_key", "cl_dom:$CERT_DIR/user/user-privkey.pem")
 modparam("proto_tls", "ca_list", "cl_dom:$CERT_DR/user/user-calist.pem")
</pre><div class='vspace'></div></div> 
<p class='vspace'><br clear='all' />
<br clear='all' />
</p>
<div class='vspace'></div><h2><a name='toc13' id='toc13'></a>4.&nbsp; Troubleshooting </h2>
<h3><a name='toc14' id='toc14'></a>4.1&nbsp;Overview</h3>
<p>Now that we’ve set up  OpenSIPS and started it, we need to do some debugging and see if everything works fine. There will be presented two ways to debug your TLS connection. First just verifying the TLS handshake with openSSL <strong>s_client</strong> and after this a more complex type of debugging which is teaching <strong>Wireshark</strong> to decrypt messages using the private key of the connection.
</p><h3><a name='toc15' id='toc15'></a>4.2&nbsp;S_client simple testing</h3>
<p>A very simple and fast method to see that the handshake works fine is the <strong>s_client</strong> tool that openSSL provides. The command for the script in the previous chapter looks like this
</p>
<div class='vspace'></div><div class='frame lfloat frame lfloat' style='color: black;' > 
<pre> openssl s_client -showcerts -debug -connect &lt;your-ip-address&gt;:&lt;port&gt; -no_ssl2 -bugs
</pre></div> 
<p class='vspace'><br clear='all' />
<br clear='all' />
</p>
<p class='vspace'>The ip address and the port are the ones you have set earlier in the <strong>listen</strong> section of the script. If you want more advanced debugging, check the following section which tells you how to debug the tls connection using <strong>Wireshark</strong>.
</p>
<div class='vspace'></div><h3><a name='toc16' id='toc16'></a>4.3&nbsp;Wireshark tracing</h3>
<p><strong>Wireshark</strong> allows us to catch the TLS handshake and also to decrypt the traffic, but in order to do this we must configure it to know the private keys of the connection. Go to <strong>Edit &#8594; Preferences &#8594; Protocols &#8594; SSL</strong>. Click the <strong>Edit</strong> button in <strong>RSA keys list</strong> section. Click the <strong>New</strong> button and add the ip address and port on which OpenSIPS is listening, the protocol (in our case <strong>sip</strong>) and in the <strong>Key File</strong> section search for the private key OpenSIPS uses for the connection ( for the example above <strong>$CERT_DIR/rootCA/private/cakey.pem</strong>). Save the configuration and then you can see both the TLS handshakes and the TCP messages that are being sent to and from OpenSIPS listening interface.
<br clear='all' />
<strong>IMPORTANT: Depending on your configuration, it might be necessary to configure both the private key of the server and the client in Wireshark!!!</strong>
</p>
</div>

  <div id='printfoot'>
    <div class='from'>Retrieved from http://www.opensips.org/Documentation/Tutorials-TLS-2-1</div>
    <div class='lastmod'>Page last modified on July 29, 2015, at 03:10 PM</div></div>
<!--HTMLFooter-->
</body>
</html>
