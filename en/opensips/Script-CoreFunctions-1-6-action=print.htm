<!DOCTYPE html 
    PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html><head>
  <title>openSIPS | Documentation / Core Functions - ver 1.6 </title>
  <link rel='stylesheet' href="print.css" tppabs="http://www.opensips.org/pub/skins/print/print.css" type='text/css' />
  <!--HTMLHeader--><style type='text/css'><!--
  ul, ol, pre, dl, p { margin-top:0px; margin-bottom:0px; }
  code.escaped { white-space: nowrap; }
  .indent { margin-left:40px; }
  .outdent { margin-left:40px; text-indent:-40px; }
  a.createlinktext { text-decoration:none; border-bottom:1px dotted gray; }
  a.createlink { text-decoration:none; position:relative; top:-0.5em;
    font-weight:bold; font-size:smaller; border-bottom:none; }
  img { border:0px; }
  
span.anchor {
	float: left;
	font-size: 10px;
	margin-left: -10px;
	width: 10px;
    position:relative; top:-0.1em;
	text-align: center;
}
span.anchor a { text-decoration: none; }
span.anchor a:hover { text-decoration: underline; }
ol.toc { text-indent:-20px; list-style: none; }
ol.toc ol.toc { text-indent:-40px; }
div.tocfloat { font-size: smaller; margin-bottom: 10px;
    border-top: 1px dotted #555555; border-bottom: 1px dotted #555555;
    padding-top: 5px; padding-bottom: 5px; 
    width: 38%; float: right; margin-left: 10px; clear: right;
    margin-right:-13px; padding-right: 13px; padding-left: 13px;
    background-color: #eeeeee; }
div.toc { font-size: smaller; 
    padding: 4px; border: 1px dotted #cccccc;
    background: #f7f7f7;
    margin-bottom: 10px; }
  table.markup { border:2px dotted #ccf; width:90%; }
  td.markup1, td.markup2 { padding-left:10px; padding-right:10px; }
  table.vert td.markup1 { border-bottom:1px solid #ccf; }
  table.horiz td.markup1 { width:23em; border-right:1px solid #ccf; }
  table.markup caption { text-align:left; }
  div.faq p, div.faq pre { margin-left:2em; }
  div.faq p.question { margin:1em 0 0.75em 0; font-weight:bold; }
  div.faqtoc div.faq * { display:none; }
  div.faqtoc div.faq p.question 
    { display:block; font-weight:normal; margin:0.5em 0 0.5em 20px; line-height:normal; }
  div.faqtoc div.faq p.question * { display:inline; }
  .editconflict { color:green; 
  font-style:italic; margin-top:1.33em; margin-bottom:1.33em; }
 
    .frame 
      { border:1px solid #cccccc; padding:4px; background-color:#f9f9f9; }
    .lfloat { float:left; margin-right:0.5em; }
    .rfloat { float:right; margin-left:0.5em; }
a.varlink { text-decoration:none; }

--></style><script type="text/javascript">
function toggle(obj) {
    var elstyle = document.getElementById(obj).style;
    var text    = document.getElementById(obj + "tog");
    if (elstyle.display == 'none') {
        elstyle.display = 'block';
        text.innerHTML = "hide";
    } else {
        elstyle.display = 'none';
        text.innerHTML = "show";
    }
}
</script>
  <link href="commentboxplus.css" tppabs="http://www.opensips.org/pub/commentboxplus/commentboxplus.css" rel='stylesheet' type='text/css' />
  <link rel='stylesheet' href="wsplus.css" tppabs="http://www.opensips.org/pub/wsplus/wsplus.css" 
    type='text/css' />
  <!--[if IE]><style type='text/css' media='screen'>
    body { behavior:url("csshover.htc")/*tpa=http://www.opensips.org/pub/wsplus/csshover.htc*/; }
    .rollover * { visibility: visible; }
  </style><![endif]-->
  <meta name='robots' content='noindex,nofollow' />

</head>
<body>
  <div id='printhead'>
    <h3>From openSIPS</h3>
    <h1 class='pagename'><a href="javascript:if(confirm(%27http://www.opensips.org/Documentation  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://www.opensips.org/Documentation%27" tppabs="http://www.opensips.org/Documentation">Documentation: Core Functions - ver 1.6 </a></h1>
  </div>
<!--PageText-->
<div id='wikitext'>
<h5>Documentation -&gt; <a class='wikilink' href="Manuals-action=print.htm" tppabs="http://www.opensips.org/Documentation/Manuals?action=print">Manuals</a> -&gt; <a class='wikilink' href="Manual-1-6-action=print.htm" tppabs="http://www.opensips.org/Documentation/Manual-1-6?action=print">Manual 1.6</a> -&gt; Core functions</h5>
<hr />
<p><span style='font-size:83%'> Pages for other versions: <a class='wikilink' href="Script-CoreFunctions-2-2-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-CoreFunctions-2-2?action=print">devel</a> <a class='wikilink' href="Script-CoreFunctions-2-1-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-CoreFunctions-2-1?action=print">2.1</a> <a class='wikilink' href="Script-CoreFunctions-1-11-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-CoreFunctions-1-11?action=print">1.11</a>  Older versions: <a class='wikilink' href="Script-CoreFunctions-1-10-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-CoreFunctions-1-10?action=print">1.10</a> <a class='wikilink' href="Script-CoreFunctions-1-9-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-CoreFunctions-1-9?action=print">1.9</a> <a class='wikilink' href="Script-CoreFunctions-1-8-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-CoreFunctions-1-8?action=print">1.8</a> <a class='wikilink' href="Script-CoreFunctions-1-7-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-CoreFunctions-1-7?action=print">1.7</a> 1.6 <a class='wikilink' href="Script-CoreFunctions-1-5-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-CoreFunctions-1-5?action=print">1.5</a> <a class='wikilink' href="Script-CoreFunctions-1-4-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-CoreFunctions-1-4?action=print">1.4</a> </span>
</p>
<p class='vspace'><br />
</p><table width='100%'><tr ><td  align='center'><span  style='color: #185662;'><span style='font-size:120%'><strong>Core functions v1.6</strong></span></span></td></tr>
</table>
<div class='vspace'></div><table width='100%'><tr ><td  align='left'><a class='wikilink' href="Script-Statements-1-6-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-Statements-1-6?action=print">Prev</a></td><td  align='right'><a class='wikilink' href="Script-CoreVar-1-6-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-CoreVar-1-6?action=print">Next</a></td></tr>
</table><hr />
<div class='vspace'></div><div class='tocfloat'><p><a name='toc' id='toc'></a><b>Table of Content</b> (<a id="tocidtog" href="javascript:toggle('tocid');">hide</a>)</p><ol class='toc' id='tocid'><li>1.&nbsp;<a href='#toc1'>add_local_rport()</a></li><li>2.&nbsp;<a href='#toc2'>append_branch()</a></li><li>3.&nbsp;<a href='#toc3'>cache_store( storage_id, attribute_name, attribute_name [,timeout])</a></li><li>4.&nbsp;<a href='#toc4'>cache_remove( storage_id, attribute_name)</a></li><li>5.&nbsp;<a href='#toc5'>cache_fetch( storage_id, attribute_name, result_avp)</a></li><li>6.&nbsp;<a href='#toc6'>break()</a></li><li>7.&nbsp;<a href='#toc7'>drop()</a></li><li>8.&nbsp;<a href='#toc8'>exit()</a></li><li>9.&nbsp;<a href='#toc9'>force_rport()</a></li><li>10.&nbsp;<a href='#toc10'>force_send_socket([proto:]address[:port])</a></li><li>11.&nbsp;<a href='#toc11'>force_tcp_alias()</a></li><li>12.&nbsp;<a href='#toc12'>forward(destination)</a></li><li>13.&nbsp;<a href='#toc13'>isdsturiset()</a></li><li>14.&nbsp;<a href='#toc14'>isflagset(int)</a></li><li>15.&nbsp;<a href='#toc15'>isbflagset([branch_idx,] flag_idx)</a></li><li>16.&nbsp;<a href='#toc16'>issflagset(flag_idx)</a></li><li>17.&nbsp;<a href='#toc17'>log([level,] string)</a></li><li>18.&nbsp;<a href='#toc18'>next_branches()</a></li><li>19.&nbsp;<a href='#toc19'>prefix(string)</a></li><li>20.&nbsp;<a href='#toc20'>pv_printf(pv, string)</a></li><li>21.&nbsp;<a href='#toc21'>return(int)</a></li><li>22.&nbsp;<a href='#toc22'>resetdsturi()</a></li><li>23.&nbsp;<a href='#toc23'>resetflag(int)</a></li><li>24.&nbsp;<a href='#toc24'>resetbflag([branch_idx,] flag_idx)</a></li><li>25.&nbsp;<a href='#toc25'>resetsflag(flag_idx)</a></li><li>26.&nbsp;<a href='#toc26'>revert_uri()</a></li><li>27.&nbsp;<a href='#toc27'>rewritehost() / sethost()</a></li><li>28.&nbsp;<a href='#toc28'>rewritehostport() / sethostport()</a></li><li>29.&nbsp;<a href='#toc29'>rewriteuser(string) / setuser(string)</a></li><li>30.&nbsp;<a href='#toc30'>rewriteuserpass() / setuserpass()</a></li><li>31.&nbsp;<a href='#toc31'>rewriteport() / setport()</a></li><li>32.&nbsp;<a href='#toc32'>rewriteuri(str) / seturi(str)</a></li><li>33.&nbsp;<a href='#toc33'>send(destination)</a></li><li>34.&nbsp;<a href='#toc34'>serialize_branches(clear)</a></li><li>35.&nbsp;<a href='#toc35'>set_advertised_address(ip|string)</a></li><li>36.&nbsp;<a href='#toc36'>set_advertised_port(int)</a></li><li>37.&nbsp;<a href='#toc37'>setdebug([level])</a></li><li>38.&nbsp;<a href='#toc38'>setdsturi(string)</a></li><li>39.&nbsp;<a href='#toc39'>setflag(int)</a></li><li>40.&nbsp;<a href='#toc40'>setbflag([branch_idx,] flag_idx)</a></li><li>41.&nbsp;<a href='#toc41'>setsflag(flag_idx)</a></li><li>42.&nbsp;<a href='#toc42'>strip(int)</a></li><li>43.&nbsp;<a href='#toc43'>strip_tail(int)</a></li><li>44.&nbsp;<a href='#toc44'>use_blacklist(string)</a></li><li>45.&nbsp;<a href='#toc45'>xlog([level,] format)</a></li><li>46.&nbsp;<a href='#toc46'>xdbg(format)</a></li></ol></div>
<p>This section lists the all the functions exported by <strong>OpenSIPS</strong> core for script usage (to be used in opensips.cfg)
</p>
<div class='vspace'></div><h4><a name='toc1' id='toc1'></a>1.&nbsp;add_local_rport()</h4>
<p>Add 'rport' parameter to the Via header generated by server (see RFC3581 for its meaning). It affects only the current processed request.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    add_local_rport()
</pre><div class='vspace'></div><h4><a name='toc2' id='toc2'></a>2.&nbsp;append_branch()</h4>
<p>Similarly to t_fork_to, it extends destination set by a new entry. The difference is that current URI is taken as new entry. 
</p>
<p class='vspace'>Without parameter, the function copies the current URI into a new branch. Thus, leaving the main branch (the URI) for further manipulation.
</p>
<p class='vspace'>With a parameter, the function copies the URI in the parameter into a new branch. Thus, the current URI is not manipulated.
</p>
<p class='vspace'>Note that it's not possible to append a new branch in "on_failure_route" block if a 6XX response has been previously received (it would be against RFC 3261).
</p>
<p class='vspace'>Example of usage:
</p><pre class='escaped'>
    # if someone calls B, the call should be forwarded to C too.
    #
    if (method=="INVITE" &amp;&amp; uri=~"sip:B@xx.xxx.xx ")
    {
        # copy the current branch (branches[0]) into
        # a new branch (branches[1])
        append_branch();
        # all URI manipulation functions work on branches[0]
        # thus, URI manipulation does not touch the 
        # appended branch (branches[1])
        seturi("sip:C@domain");

        # now: branch 0 = C@domain
        #      branch 1 = B@xx.xx.xx.xx

        # and if you need a third destination ...

        # copy the current branch (branches[0]) into
        # a new branch (branches[2])
        append_branch();

        # all URI manipulation functions work on branches[0]
        # thus, URI manipulation does not touch the 
        # appended branch (branches[1-2])
        seturi("sip:D@domain");

        # now: branch 0 = D@domain
        #      branch 1 = B@xx.xx.xx.xx
        #      branch 2 = C@domain

        t_relay();
        exit;
    };

    # You could also use append_branch("sip:C@domain") which adds a branch with the new URI:


    if(method=="INVITE" &amp;&amp; uri=~"sip:B@xx.xxx.xx ") {
        # append a new branch with the second destination
        append_branch("sip:user@domain");
        # now: branch 0 = B@xx.xx.xx.xx
        # now: branch 1 = C@domain

        t_relay();
        exit;
}
</pre>
<div class='vspace'></div><h4><a name='toc3' id='toc3'></a>3.&nbsp;cache_store( storage_id, attribute_name, attribute_name [,timeout])</h4>
<p>This sets in a memory-cache-like-storage system a new value for an attribute. Both the attribute name and value may contain pseudo-variables. If the attribute does not already exist in the memcache, it will be inserted with the given value; if already present, its value will be replaced with the new one. The function may optionally take an extra parameter, a timeout (or lifetime) value for the attribute - after the lifetime is exceeded, the attribute is automatically purged from memcache.
</p>
<p class='vspace'>As these functions (memcache) are just part of a generic memcache interface, you need to specify what memcache implementation you want  to use via this command -&gt; the <em>storage_id</em> points the memcache implementation. Currently there are two available, "local", provided by the <a class='urllink' href="javascript:if(confirm(%27http://www.opensips.org/html/docs/modules/1.6.x/localcache.html  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://www.opensips.org/html/docs/modules/1.6.x/localcache.html%27" tppabs="http://www.opensips.org/html/docs/modules/1.6.x/localcache.html" rel='nofollow'><strong>localcache</strong> module</a> and "memcached", provided by the <a class='urllink' href="javascript:if(confirm(%27http://www.opensips.org/html/docs/modules/1.6.x/memcached.html  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://www.opensips.org/html/docs/modules/1.6.x/memcached.html%27" tppabs="http://www.opensips.org/html/docs/modules/1.6.x/memcached.html" rel='nofollow'><strong>memcached</strong> module</a> .
</p>
<p class='vspace'>Function returns true is the new attribute was successfully inserted.
</p>
<div class='vspace'></div><pre class='escaped'>
cache_store("local","my_attr","$avp(i:55)",1200);
cache_store("local","passwd_$tu","$var(x)");
</pre>
<p class='vspace'>A more complex example can be found in the <a class='wikilink' href="Tutorials-MemoryCaching-action=print.htm" tppabs="http://www.opensips.org/Documentation/Tutorials-MemoryCaching?action=print">MemCache Tutorial</a>.
</p>
<div class='vspace'></div><h4><a name='toc4' id='toc4'></a>4.&nbsp;cache_remove( storage_id, attribute_name)</h4>
<p>This removes an attribute from a memory-cache-like-storage system. The attribute name may contain pseudo-variables.
</p>
<p class='vspace'>As these functions (memcache) are just part of a generic memcache interface, you need to specify what memcache implementation you want  to use via this command -&gt; the <em>storage_id</em> points the memcache implementation. Currently there are two available, "local", provided by the <a class='urllink' href="javascript:if(confirm(%27http://www.opensips.org/html/docs/modules/1.6.x/localcache.html  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://www.opensips.org/html/docs/modules/1.6.x/localcache.html%27" tppabs="http://www.opensips.org/html/docs/modules/1.6.x/localcache.html" rel='nofollow'><strong>localcache</strong> module</a> and "memcached", provided by the <a class='urllink' href="javascript:if(confirm(%27http://www.opensips.org/html/docs/modules/1.6.x/memcached.html  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://www.opensips.org/html/docs/modules/1.6.x/memcached.html%27" tppabs="http://www.opensips.org/html/docs/modules/1.6.x/memcached.html" rel='nofollow'><strong>memcached</strong> module</a> .
</p>
<p class='vspace'>Function returns false only if the <em>storage_id</em> is invalid.
</p>
<div class='vspace'></div><pre class='escaped'>
cache_remove("local","my_attr");
cache_remove("local","passwd_$tu");
</pre>
<p class='vspace'>A more complex example can be found in the <a class='wikilink' href="Tutorials-MemoryCaching-action=print.htm" tppabs="http://www.opensips.org/Documentation/Tutorials-MemoryCaching?action=print">MemCache Tutorial</a>.
</p>
<div class='vspace'></div><h4><a name='toc5' id='toc5'></a>5.&nbsp;cache_fetch( storage_id, attribute_name, result_avp)</h4>
<p>This function fetches from a memory-cache-like-storage system the value of an attribute. The attribute name may contain pseudo-variables. The result (if any) will be stored in the <strong>result_avp</strong> <a class='wikilink' href="Script-CoreVar-1-6-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-CoreVar-1-6?action=print">AVP variable</a>. 
</p>
<p class='vspace'>As these functions (memcache) are just part of a generic memcache interface, you need to specify what memcache implementation you want  to use via this command -&gt; the <em>storage_id</em> points the memcache implementation. Currently there are two available, "local", provided by the <a class='urllink' href="javascript:if(confirm(%27http://www.opensips.org/html/docs/modules/1.6.x/localcache.html  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://www.opensips.org/html/docs/modules/1.6.x/localcache.html%27" tppabs="http://www.opensips.org/html/docs/modules/1.6.x/localcache.html" rel='nofollow'><strong>localcache</strong> module</a> and "memcached", provided by the <a class='urllink' href="javascript:if(confirm(%27http://www.opensips.org/html/docs/modules/1.6.x/memcached.html  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://www.opensips.org/html/docs/modules/1.6.x/memcached.html%27" tppabs="http://www.opensips.org/html/docs/modules/1.6.x/memcached.html" rel='nofollow'><strong>memcached</strong> module</a>.
</p>
<p class='vspace'>Function returns true if the attribute was found and its value returned.
</p>
<div class='vspace'></div><pre class='escaped'>
cache_fetch("local","my_attr", $avp(i:11) );
cache_fetch("local","passwd_$tu", $var(x) );
</pre>
<p class='vspace'>A more complex example can be found in the <a class='wikilink' href="Tutorials-MemoryCaching-action=print.htm" tppabs="http://www.opensips.org/Documentation/Tutorials-MemoryCaching?action=print">MemCache Tutorial</a>.
</p>
<div class='vspace'></div><h4><a name='toc6' id='toc6'></a>6.&nbsp;break()</h4>
<p>Since v0.10.0-dev3, 'break' can no longer be used to stop the execution of a route. The only place to use is to end a 'case' block in a 'switch' statement. 'return' must be now used instead of old 'break'.
</p>
<p class='vspace'>'return' and 'break' have now a similar meaning as in c/shell.
</p>
<div class='vspace'></div><h4><a name='toc7' id='toc7'></a>7.&nbsp;drop()</h4>
<p>Stop the execution of the configuration script and alter the implicit action which is done afterwards.
</p>
<p class='vspace'>If the function is called in a 'branch_route' then the branch is discarded (implicit action for 'branch_route' is to forward the request).
</p>
<p class='vspace'>If the function is called in a 'onreply_route' then any provisional reply is discarded (implicit action for 'onreply_route' is to send the reply upstream according to Via header).
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    onreply_route {
        if(status=="183") {
            drop();
        }
    }
</pre><div class='vspace'></div><h4><a name='toc8' id='toc8'></a>8.&nbsp;exit()</h4>
<p>Stop the execution of the configuration script -- it has the same behaviour as return(0). It does not affect the implicit action to be taken after script execution. 
</p>
<div class='vspace'></div><pre>  route {
    if (route(2)) {
      xlog("L_NOTICE","method $rm is INVITE\n");
    } else {
      xlog("L_NOTICE","method is $rm\n");
    };
  }

  route[2] {
    if (is_method("INVITE")) {
      return(1);
    } else if (is_method("REGISTER")) {
      return(-1);
    } else if (is_method("MESSAGE")) {
      sl_send_reply("403","IM not allowed");
      exit;
    };
  }
</pre><div class='vspace'></div><h4><a name='toc9' id='toc9'></a>9.&nbsp;force_rport()</h4>
<p>Force_rport() adds the rport parameter to the first Via header. Thus, <strong>OpenSIPS</strong> will add the received IP port to the top most via header in the SIP message, even if the client does not indicate support for rport. This enables subsequent SIP messages to return to the proper port later on in a SIP transaction.
</p>
<p class='vspace'>The rport parameter is defined in RFC 3581.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    force_rport();
</pre><div class='vspace'></div><h4><a name='toc10' id='toc10'></a>10.&nbsp;force_send_socket([proto:]address[:port])</h4>
<p>Force <strong>OpenSIPS</strong> to send the message from the specified socket (it _must_ be one of the sockets <strong>OpenSIPS</strong> listens on). If the protocol doesn't match (e.g. UDP message "forced" to a TCP socket) the closest socket of the same protocol is used.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    force_send_socket(10.10.10.10:5060);
</pre><div class='vspace'></div><h4><a name='toc11' id='toc11'></a>11.&nbsp;force_tcp_alias()</h4>
<p>force_tcp_alias(port)      
</p>
<p class='vspace'>adds a tcp port alias for the current connection (if tcp).
Usefull if you want to send all the trafic to port_alias through
the same connection this request came from [it could help 
for firewall or nat traversal].
With no parameters adds the port from the message via as the alias.
When the "aliased" connection is closed (e.g. it's idle for too
much time), all the port aliases are removed.
</p>
<div class='vspace'></div><h4><a name='toc12' id='toc12'></a>12.&nbsp;forward(destination)</h4>
<p>Forward the SIP request to the given destination in stateless mode. This has the format of [proto:]host[:port]. Host can be an IP or hostname; supported protocols are UDP, TCP and TLS. (For TLS, you need to compile the TLS support into core).
If proto or port are not specified, NAPTR and SRV lookups will be used to determine them (if possible).
</p>
<p class='vspace'>If destination parameter is missing, the forward will be done based on RURI.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    forward("10.0.0.10:5060");
    #or
    forward();
</pre><div class='vspace'></div><h4><a name='toc13' id='toc13'></a>13.&nbsp;isdsturiset()</h4>
<p>Test if the dst_uri field (next hop address) is set.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    if(isdsturiset()) {
        log("dst_uri is set\n");
    };
</pre><div class='vspace'></div><h4><a name='toc14' id='toc14'></a>14.&nbsp;isflagset(int)</h4>
<p>Test if a flag is set for current processed message (if the flag value is 1). The value of the parameter can be in range of 0..31.
</p>
<p class='vspace'>For more see <a class='wikilink' href="Script-Flags-1-6-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-Flags-1-6?action=print">Flags Documentation</a>.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    if(isflagset(3)) {
        log("flag 3 is set\n");
    };
</pre><div class='vspace'></div><h4><a name='toc15' id='toc15'></a>15.&nbsp;isbflagset([branch_idx,] flag_idx)</h4>
<p>Test if a flag is set for a specific branch (if the flag value is 1). The value of the "flag_idx" parameter can be in range of 0..31. "branch_idx" identify the branch for which the flags are tested - it must be a positiv number. Branch index 0 refers to the RURI branch. If this parameter is missing, 0 branch index is used as default.
</p>
<p class='vspace'>For more about script flags, see <a class='wikilink' href="Script-Flags-1-6-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-Flags-1-6?action=print">Flags Documentation</a>.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    if(isbflagset(1,3)) {
        log("flag 3 is set in branch 1\n");
    };
</pre><div class='vspace'></div><h4><a name='toc16' id='toc16'></a>16.&nbsp;issflagset(flag_idx)</h4>
<p>Test if a script flag is set (if the flag value is 1). The value of the "flag_idx" parameter can be in range of 0..31.
</p>
<p class='vspace'>For more about script flags, see <a class='wikilink' href="Script-Flags-1-6-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-Flags-1-6?action=print">Flags Documentation</a>.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    if(issflagset(2)) {
        log("script flag 2 is set\n");
    };
</pre><div class='vspace'></div><h4><a name='toc17' id='toc17'></a>17.&nbsp;log([level,] string)</h4>
<p>Write text message to standard error terminal or syslog. You can specify the log level as first parameter.
</p>
<p class='vspace'>For more see: <a class='urllink' href="javascript:if(confirm(%27http://www.voice-system.ro/docs/ser-syslog/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://www.voice-system.ro/docs/ser-syslog/%27" tppabs="http://www.voice-system.ro/docs/ser-syslog/" rel='nofollow'>http://www.voice-system.ro/docs/ser-syslog/</a>
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    log("just some text message\n");
</pre><div class='vspace'></div><h4><a name='toc18' id='toc18'></a>18.&nbsp;next_branches()</h4>
<p>Adds to the request a new destination set that includes all highest priority class contacts ('q' value based) from the serialized branches (see serialize_branches()). If called from a route block, it rewrites the request uri with first contact and adds the remaining contacts as parallel branches.  If called from failure route block, adds all contacts as parallel branches.  All used
contacts are removes the serialized branches.
</p>
<p class='vspace'>Returns true if at least one contact was added for the request's destination set - returns 1 if other branches are still pending and return 2 if no other branches are left for future processing - shortly, if 2: this is the last branch, if 1: other will follow. False is return is nothing was done (no more serialized branches).
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    next_branches();
</pre><div class='vspace'></div><h4><a name='toc19' id='toc19'></a>19.&nbsp;prefix(string)</h4>
<p>Add the string parameter in front of username in R-URI.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    prefix("00");
</pre><div class='vspace'></div><h4><a name='toc20' id='toc20'></a>20.&nbsp;pv_printf(pv, string)</h4>
<p>Prints the formatted 'string' in the AVP 'pv'. The 'string' parameter can include any pseudo-variable defined in <strong>OpenSIPS</strong>. The 'pv' can be any writable pseudo-variable -- e.g.,: AVPs, VARs, $ru, $rU, $rd, $du, $br, $fs.
</p>
<p class='vspace'>It was extended from the avp_printf(...) function exported in previous versions by the avpops module. Starting with 1.3.0, avp_printf(...) is just an alias to pv_printf(...).
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    pv_printf("$var(x)", "r-uri: $ru");
    pv_printf("$avp(i:3)", "from uri: $fu");
</pre><div class='vspace'></div><h4><a name='toc21' id='toc21'></a>21.&nbsp;return(int)</h4>
<p>The return() function allows you to return any integer value from a called route() block.
You can test the value returned by a route using "$retcode" variable.
</p>
<p class='vspace'>return(0) is same as "exit()";
</p>
<p class='vspace'>In bool expressions:
</p>
<div class='vspace'></div><pre>  * Negative and ZERO is FALSE
  * Positive is TRUE
</pre><p class='vspace'>Example usage: 
</p>
<div class='vspace'></div><pre class='escaped'>
route {
  if (route(2)) {
    xlog("L_NOTICE","method $rm is INVITE\n");
  } else {
    xlog("L_NOTICE","method $rm is REGISTER\n");
  };
}
</pre>
<pre class='escaped'>
route[2] {
  if (is_method("INVITE")) {
    return(1);
  } else if (is_method("REGISTER")) {
    return(-1);
  } else {
    return(0);
  };
}
</pre>
<div class='vspace'></div><h4><a name='toc22' id='toc22'></a>22.&nbsp;resetdsturi()</h4>
<p>Set the value of dst_uri filed to NULL. dst_uri field is usually set after loose_route() or lookup("location") if the contact address is behind a NAT.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    resetdsturi();
</pre><div class='vspace'></div><h4><a name='toc23' id='toc23'></a>23.&nbsp;resetflag(int)</h4>
<p>Reset a flag for current processed message (set the value to 0). The value of the parameter can be in range of 0..31.
</p>
<p class='vspace'>For more see <a class='wikilink' href="Script-Flags-1-6-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-Flags-1-6?action=print">Flags Documentation</a>.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    resetflag(3);
</pre><div class='vspace'></div><h4><a name='toc24' id='toc24'></a>24.&nbsp;resetbflag([branch_idx,] flag_idx)</h4>
<p>Reset a flag for a specific branch (set flag to value 0). The value of the "flag_idx" parameter can be in range of 0..31. "branch_idx" identify the branch for which the flag is reset - it must be a positiv number. Branch index 0 refers to the RURI branch. If this parameter is missing, 0 branch index is used as default.
</p>
<p class='vspace'>For more about script flags, see <a class='wikilink' href="Script-Flags-1-6-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-Flags-1-6?action=print">Flags Documentation</a>.
</p>
<p class='vspace'>Example of usage:
</p><pre class='escaped'>
    resetbflag(1,3);
    # or
    resetbflag(3); # same with resetbflag(0,3)
</pre>
<div class='vspace'></div><h4><a name='toc25' id='toc25'></a>25.&nbsp;resetsflag(flag_idx)</h4>
<p>Reset a script flag (set flag to value 0). The value of the "flag_idx" parameter can be in range of 0..31.
</p>
<p class='vspace'>For more about script flags, see <a class='wikilink' href="Script-Flags-1-6-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-Flags-1-6?action=print">Flags Documentation</a>.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    resetsflag(2);
</pre><div class='vspace'></div><h4><a name='toc26' id='toc26'></a>26.&nbsp;revert_uri()</h4>
<p>Set the R-URI to the value of the R-URI as it was when the request was received by server (undo all changes of R-URI).
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    revert_uri();
</pre><div class='vspace'></div><h4><a name='toc27' id='toc27'></a>27.&nbsp;rewritehost() / sethost()</h4>
<p>Rewrite the domain part of the R-URI with the value of function's parameter. Other parts of the R-URI like username, port and URI parameters remain unchanged.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    rewritehost("1.2.3.4");
</pre><div class='vspace'></div><h4><a name='toc28' id='toc28'></a>28.&nbsp;rewritehostport() / sethostport()</h4>
<p>Rewrite the domain part and port of the R-URI with the value of function's parameter. Other parts of the R-URI like username and URI parameters remain unchanged.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    rewritehostport("1.2.3.4:5080");
</pre><div class='vspace'></div><h4><a name='toc29' id='toc29'></a>29.&nbsp;rewriteuser(string) / setuser(string)</h4>
<p>Rewrite the user part of the R-URI with the value of function's parameter.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    rewriteuser("newuser");
</pre><div class='vspace'></div><h4><a name='toc30' id='toc30'></a>30.&nbsp;rewriteuserpass() / setuserpass()</h4>
<p>Rewrite the password part of the R-URI with the value of function's parameter.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    rewriteuserpass("my_secret_passwd");
</pre><div class='vspace'></div><h4><a name='toc31' id='toc31'></a>31.&nbsp;rewriteport() / setport()</h4>
<p>Rewrites/sets the port part of the R-URI with the value of function's parameter.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    rewriteport("5070");
</pre><div class='vspace'></div><h4><a name='toc32' id='toc32'></a>32.&nbsp;rewriteuri(str) / seturi(str)</h4>
<p>Rewrite the request URI.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    rewriteuri("sip:test@opensips.org");
</pre><div class='vspace'></div><h4><a name='toc33' id='toc33'></a>33.&nbsp;send(destination)</h4>
<p>Send the original SIP message to a specific destination in stateless mode. This is definied as [proto:]host[:port]. No changes are applied to received message, no Via header is added. Host can be an IP or hostname; supported protocols are UDP, TCP and TLS. (For TLS, you need to compile the TLS support into core). If proto or port are not specified, NAPTR and SRV lookups will be used to determine them (if possible).
</p>
<p class='vspace'>Parameter is mandatory and has string format.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>   send("udp:10.10.10.10:5070");
</pre><div class='vspace'></div><h4><a name='toc34' id='toc34'></a>34.&nbsp;serialize_branches(clear)</h4>
<p>Takes all the branches added for parallel forking (with append_branch() and including the current RURI) and prepare them for serial forking. The ordering is done in increasing "q" order. The serialized branches are internally stored in AVPs - you will be able to fetch and use via the "next_branches()" function.<br />NOTE that (according to RFC3261), the branches with the same "q" value will still be parallel forked during a certain step in the serial forking (it will result a combination of serial with parallel forking).<br />NOTE that this function is not changing RURI in the messages - it is just converting from parallel to serial branches (preparing branches).
</p>
<p class='vspace'>If "clear" is set to non-zero, all previous results of another "serialize_branches" (serialized branches which were not yet used) will be deleted before setting the new serialized branches.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>   serialize_branches(1);
</pre><div class='vspace'></div><h4><a name='toc35' id='toc35'></a>35.&nbsp;set_advertised_address(ip|string)</h4>
<p>Same as 'advertised_address' but it affects only the current message. It has priority if 'advertised_address' is also set.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    set_advertised_address("opensips.org");
</pre><div class='vspace'></div><h4><a name='toc36' id='toc36'></a>36.&nbsp;set_advertised_port(int)</h4>
<p>Same as 'advertised_port' but it affects only the current message. It has priority over 'advertised_port'.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    set_advertised_port(5080);
</pre><div class='vspace'></div><h4><a name='toc37' id='toc37'></a>37.&nbsp;setdebug([level])</h4>
<p>Changes the debug level of the current process from script. If called without the parameter then the debug level of the current process will be reset to the global level. If the debug level of the current process is changed then changing the global debug level (using MI function) does not affect it, so be careful and make sure to reset the process debug level when you are done. This function is very helpful if you are tracing and debugging only a specific piece of code. 
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    debug= -1 # errors only
    .....
    {
      ......
      setdebug(4); # set the debug level of the current process to DBG
      uac_replace_from(....);
      setdebug(); # reset the debug level of the current process to the global level
      .......
    }
</pre><div class='vspace'></div><h4><a name='toc38' id='toc38'></a>38.&nbsp;setdsturi(string)</h4>
<p>Explicitely set the dst_uri field to the value of the paramater. The parameter has to be a valid SIP URI.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    setdsturi("sip:10.10.10.10:5090");
</pre><div class='vspace'></div><h4><a name='toc39' id='toc39'></a>39.&nbsp;setflag(int)</h4>
<p>Set a flag for current processed message. The value of the parameter can be in range of 0..31. The flags are used to mark the message for special processing (e.g., accounting) or to keep some state (e.g., message authenticated).
</p>
<p class='vspace'>For more see <a class='urllink' href="javascript:if(confirm(%27http://www.voice-system.ro/docs/ser-flags/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://www.voice-system.ro/docs/ser-flags/%27" tppabs="http://www.voice-system.ro/docs/ser-flags/" rel='nofollow'>http://www.voice-system.ro/docs/ser-flags/</a> .
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    setflag(3);
</pre><div class='vspace'></div><h4><a name='toc40' id='toc40'></a>40.&nbsp;setbflag([branch_idx,] flag_idx)</h4>
<p>Set a flag for a specific branch (set flag to value 1). The value of the "flag_idx" parameter can be in range of 0..31. "branch_idx" identify the branch for which the flag is set - it must be a positiv number. Branch index 0 refers to the RURI branch. If this parameter is missing, 0 branch index is used as default.
</p>
<p class='vspace'>For more about script flags, see <a class='wikilink' href="Script-Flags-1-6-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-Flags-1-6?action=print">Flags Documentation</a>.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    setbflag(1,3);
    # or
    setbflag(3); # same with setbflag(0,3)
</pre><div class='vspace'></div><h4><a name='toc41' id='toc41'></a>41.&nbsp;setsflag(flag_idx)</h4>
<p>Set a script flag (set flag to value 0). The value of the "flag_idx" parameter can be in range of 0..31.
</p>
<p class='vspace'>For more about script flags, see <a class='wikilink' href="Script-Flags-1-6-action=print.htm" tppabs="http://www.opensips.org/Documentation/Script-Flags-1-6?action=print">Flags Documentation</a>.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    setsflag(2);
</pre><div class='vspace'></div><h4><a name='toc42' id='toc42'></a>42.&nbsp;strip(int)</h4>
<p>Strip the first N-th characters from username of R-URI (N is the value of the parameter).
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    strip(3);
</pre><div class='vspace'></div><h4><a name='toc43' id='toc43'></a>43.&nbsp;strip_tail(int)</h4>
<p>Strip the last N-th characters from username of R-URI (N is the value of the parameter).
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>  strip_tail(3);
</pre><div class='vspace'></div><h4><a name='toc44' id='toc44'></a>44.&nbsp;use_blacklist(string)</h4>
<p>Enables the DNS blacklist name received as parameter. Its primary purposes will be to prevent sending requests to critical IPs (like GWs) due DNS or to avoid sending to destinations that are known to be unavailable (temporary or permanent).
</p><pre class='escaped'>
    use_blacklist("pstn-gws");
</pre>
<div class='vspace'></div><h4><a name='toc45' id='toc45'></a>45.&nbsp;xlog([level,] format)</h4>
<p>IMPORTANT: available only starting with 1.6.3 (previously available via xlog module)
</p>
<p class='vspace'>Prints to output a log message (any pseudo-variable is allowed).
</p>
<p class='vspace'>The <strong>level</strong> can be level - L_ALERT, L_CRIT, L_ERR, L_WARN, L_NOTICE, L_INFO, L_DBG or any pseudo-variable with an integer value.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre class='escaped'>
xlog("L_ERR", "time [$Tf] method ($rm) r-uri ($ru) 2nd via ($hdr(via[1]))\n");
...
xlog("time [$Tf] method ($rm) r-uri ($ru) 2nd via ($hdr(via[1]))\n");
...
$var(loglevel) = 2;
xlog("$var(loglevel)", "time [$Tf] method ($rm) r-uri ($ru)\n");
</pre>
<div class='vspace'></div><h4><a name='toc46' id='toc46'></a>46.&nbsp; xdbg(format)</h4>
<p>IMPORTANT: available only starting with 1.6.3 (previously available via xlog module)
</p>
<p class='vspace'>Prints to output a log message (any pseudo-variable is allowed) via de DEBUG level.
</p>
<p class='vspace'>Example of usage:
</p>
<div class='vspace'></div><pre>    xdbg("time $Cbx[$Tf]$Cxx method ($rm) r-uri ($ru)\n");
</pre>
</div>

  <div id='printfoot'>
    <div class='from'>Retrieved from http://www.opensips.org/Documentation/Script-CoreFunctions-1-6</div>
    <div class='lastmod'>Page last modified on August 05, 2013, at 03:09 PM</div></div>
<!--HTMLFooter-->
</body>
</html>
